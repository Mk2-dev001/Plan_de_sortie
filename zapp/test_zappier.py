#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de test pour v√©rifier la configuration du script Zapier-like
"""

import os
import json
import sys
from zapp.zappier import GoogleDriveToWordPress

def test_configuration():
    """Teste la configuration du script"""
    print("üîß Test de la configuration...")
    
    # V√©rifie si le fichier de configuration existe
    if not os.path.exists("zappier_config.json"):
        print("‚ùå Fichier de configuration non trouv√©")
        print("   Lancez d'abord le script principal pour cr√©er la configuration")
        return False
    
    try:
        with open("zappier_config.json", 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        print("‚úÖ Fichier de configuration trouv√©")
        
        # V√©rifie la structure de la configuration
        required_sections = ["google_drive", "wordpress", "monitoring"]
        for section in required_sections:
            if section not in config:
                print(f"‚ùå Section '{section}' manquante dans la configuration")
                return False
        
        print("‚úÖ Structure de configuration valide")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la lecture de la configuration: {e}")
        return False

def test_google_drive_credentials():
    """Teste les identifiants Google Drive"""
    print("\nüîë Test des identifiants Google Drive...")
    
    if not os.path.exists("credentials.json"):
        print("‚ùå Fichier credentials.json non trouv√©")
        print("   T√©l√©chargez vos identifiants depuis Google Cloud Console")
        return False
    
    try:
        connector = GoogleDriveToWordPress()
        connector.authenticate_google_drive()
        print("‚úÖ Authentification Google Drive r√©ussie")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur d'authentification Google Drive: {e}")
        return False

def test_wordpress_connection():
    """Teste la connexion WordPress"""
    print("\nüåê Test de la connexion WordPress...")
    
    try:
        connector = GoogleDriveToWordPress()
        
        # Test de connexion basique
        site_url = connector.config["wordpress"]["site_url"]
        if site_url == "https://votre-site.com":
            print("‚ùå URL WordPress non configur√©e")
            print("   Modifiez zappier_config.json avec votre URL WordPress")
            return False
        
        # Test de l'API REST
        api_url = f"{site_url}/wp-json/wp/v2/posts"
        response = connector.wordpress_session.get(api_url)
        
        if response.status_code == 200:
            print("‚úÖ API REST WordPress accessible")
        else:
            print(f"‚ö†Ô∏è  API REST WordPress retourne le code {response.status_code}")
        
        # Test d'authentification
        try:
            connector.authenticate_wordpress()
            print("‚úÖ Authentification WordPress r√©ussie")
            return True
        except Exception as e:
            print(f"‚ùå Erreur d'authentification WordPress: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion WordPress: {e}")
        return False

def test_folder_access():
    """Teste l'acc√®s au dossier Google Drive"""
    print("\nüìÅ Test d'acc√®s au dossier Google Drive...")
    
    try:
        connector = GoogleDriveToWordPress()
        connector.authenticate_google_drive()
        
        folder_name = connector.config["google_drive"]["folder_name"]
        folder_id = connector.find_folder_id(folder_name)
        
        if folder_id:
            print(f"‚úÖ Dossier '{folder_name}' trouv√© (ID: {folder_id})")
            
            # Test de r√©cup√©ration des fichiers
            files = connector.get_files_from_folder(folder_id)
            print(f"‚úÖ {len(files)} fichiers trouv√©s dans le dossier")
            return True
        else:
            print(f"‚ùå Dossier '{folder_name}' non trouv√©")
            print("   V√©rifiez que le dossier existe dans votre Google Drive")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur d'acc√®s au dossier: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("=== Test de configuration du script Zapier-like ===\n")
    
    tests = [
        ("Configuration", test_configuration),
        ("Identifiants Google Drive", test_google_drive_credentials),
        ("Connexion WordPress", test_wordpress_connection),
        ("Acc√®s au dossier Google Drive", test_folder_access)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur lors du test '{test_name}': {e}")
            results.append((test_name, False))
    
    # R√©sum√© des tests
    print("\n" + "="*50)
    print("üìä R√âSUM√â DES TESTS")
    print("="*50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS√â" if result else "‚ùå √âCHOU√â"
        print(f"{test_name:<30} {status}")
        if result:
            passed += 1
    
    print(f"\nR√©sultat: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("\nüéâ Tous les tests sont pass√©s ! Le script est pr√™t √† √™tre utilis√©.")
        print("   Lancez 'python zappier.py' pour d√©marrer la surveillance.")
    else:
        print("\n‚ö†Ô∏è  Certains tests ont √©chou√©. Veuillez corriger les probl√®mes avant d'utiliser le script.")
        print("   Consultez la documentation dans README_zappier.md pour plus d'informations.")

if __name__ == "__main__":
    main() 