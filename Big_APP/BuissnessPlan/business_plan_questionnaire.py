import streamlit as st
from datetime import datetime
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
import io

# Configuration de la page
st.set_page_config(
    page_title="Assistant Business Plan - Application Cin√©ma",
    page_icon="üé¨",
    layout="wide"
)

# Titre de l'application
st.title("üé¨ Business Plan - Application de Planification Cin√©matographique")
st.markdown("""
Ce questionnaire vous guidera dans l'√©laboration du business plan pour votre application de planification de projections cin√©matographiques.
""")

def generer_pdf(reponses):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=30, leftMargin=30, topMargin=30, bottomMargin=30)
    styles = getSampleStyleSheet()
    story = []

    # Style personnalis√© pour les titres
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=16,
        spaceAfter=20,
        textColor=colors.HexColor('#2E86C1')
    )

    # Style pour les sous-titres
    subtitle_style = ParagraphStyle(
        'CustomSubtitle',
        parent=styles['Heading2'],
        fontSize=14,
        spaceAfter=10,
        textColor=colors.HexColor('#3498DB')
    )

    # Style pour le texte normal
    normal_style = ParagraphStyle(
        'CustomNormal',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=10
    )

    # Titre principal
    story.append(Paragraph("Business Plan - Application Cin√©matographique", title_style))
    story.append(Spacer(1, 20))

    # Section 1: Informations g√©n√©rales
    story.append(Paragraph("1. Informations g√©n√©rales", subtitle_style))
    info_data = [
        ["Nom de l'entreprise", reponses.get('nom_entreprise', 'Non renseign√©')],
        ["Date de lancement", str(reponses.get('date_creation', 'Non renseign√©'))],
        ["Forme juridique", reponses.get('forme_juridique', 'Non renseign√©')],
        ["Type de cin√©ma cible", reponses.get('type_cinema', 'Non renseign√©')],
        ["Zone g√©ographique", ", ".join(reponses.get('zone_geographique', ['Non renseign√©']))],
        ["Nombre d'utilisateurs cible", str(reponses.get('nombre_utilisateurs_cible', 'Non renseign√©'))]
    ]
    info_table = Table(info_data, colWidths=[2*inch, 4*inch])
    info_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#E8F4F8')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#2E86C1')),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.white),
        ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 10),
        ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#D6EAF8'))
    ]))
    story.append(info_table)
    story.append(Spacer(1, 20))

    # Section 2: Analyse du march√©
    story.append(Paragraph("2. Analyse du march√©", subtitle_style))
    story.append(Paragraph("Description de l'application:", styles['Heading3']))
    story.append(Paragraph(reponses.get('description_application', 'Non renseign√©'), normal_style))
    story.append(Spacer(1, 10))
    story.append(Paragraph("Client√®le cible:", styles['Heading3']))
    story.append(Paragraph(", ".join(reponses.get('cible_principale', ['Non renseign√©'])), normal_style))
    story.append(Spacer(1, 10))
    story.append(Paragraph("Analyse de la concurrence:", styles['Heading3']))
    story.append(Paragraph(reponses.get('concurrence', 'Non renseign√©'), normal_style))
    story.append(Spacer(1, 20))

    # Section 3: Strat√©gie marketing
    story.append(Paragraph("3. Strat√©gie marketing", subtitle_style))
    story.append(Paragraph("Positionnement:", styles['Heading3']))
    story.append(Paragraph(reponses.get('positionnement', 'Non renseign√©'), normal_style))
    story.append(Spacer(1, 10))
    story.append(Paragraph("Canaux d'acquisition:", styles['Heading3']))
    story.append(Paragraph(", ".join(reponses.get('canaux_acquisition', ['Non renseign√©'])), normal_style))
    story.append(Spacer(1, 10))
    story.append(Paragraph("Mod√®le √©conomique:", styles['Heading3']))
    story.append(Paragraph(reponses.get('strategie_prix', 'Non renseign√©'), normal_style))
    story.append(Spacer(1, 20))

    # Section 4: Plan op√©rationnel
    story.append(Paragraph("4. Plan op√©rationnel", subtitle_style))
    story.append(Paragraph("Fonctionnalit√©s principales:", styles['Heading3']))
    story.append(Paragraph(reponses.get('fonctionnalites_principales', 'Non renseign√©'), normal_style))
    story.append(Spacer(1, 10))
    story.append(Paragraph("Technologies utilis√©es:", styles['Heading3']))
    story.append(Paragraph(", ".join(reponses.get('technologies', ['Non renseign√©'])), normal_style))
    story.append(Spacer(1, 10))
    story.append(Paragraph("Infrastructure n√©cessaire:", styles['Heading3']))
    story.append(Paragraph(reponses.get('infrastructure', 'Non renseign√©'), normal_style))
    story.append(Spacer(1, 20))

    # Section 5: Plan financier
    story.append(Paragraph("5. Plan financier", subtitle_style))
    finance_data = [
        ["Investissement initial", f"{reponses.get('investissement_initial', 0):,.2f} ‚Ç¨"],
        ["Prix de l'abonnement mensuel", f"{reponses.get('prix_abonnement', 0):,.2f} ‚Ç¨"],
        ["Co√ªt op√©rationnel mensuel", f"{reponses.get('cout_operationnel_mensuel', 0):,.2f} ‚Ç¨"],
        ["Objectif d'utilisateurs payants", str(reponses.get('objectif_utilisateurs_payants', 0))]
    ]
    finance_table = Table(finance_data, colWidths=[3*inch, 3*inch])
    finance_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#E8F4F8')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#2E86C1')),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.white),
        ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 10),
        ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#D6EAF8'))
    ]))
    story.append(finance_table)
    story.append(Spacer(1, 20))

    # Section 6: Analyse des risques
    story.append(Paragraph("6. Analyse des risques", subtitle_style))
    story.append(Paragraph("Risques techniques:", styles['Heading3']))
    story.append(Paragraph(reponses.get('risques_techniques', 'Non renseign√©'), normal_style))
    story.append(Spacer(1, 10))
    story.append(Paragraph("Risques li√©s au march√©:", styles['Heading3']))
    story.append(Paragraph(reponses.get('risques_marche', 'Non renseign√©'), normal_style))
    story.append(Spacer(1, 10))
    story.append(Paragraph("Strat√©gies de mitigation:", styles['Heading3']))
    story.append(Paragraph(reponses.get('strategies_mitigation', 'Non renseign√©'), normal_style))

    # G√©n√©ration du PDF
    doc.build(story)
    buffer.seek(0)
    return buffer

# Initialisation des r√©ponses
if 'reponses' not in st.session_state:
    st.session_state.reponses = {}

# Section 1: Informations g√©n√©rales
st.header("1Ô∏è‚É£ Informations g√©n√©rales")
col1, col2 = st.columns(2)

with col1:
    st.session_state.reponses['nom_entreprise'] = st.text_input("Nom de l'entreprise")
    st.session_state.reponses['date_creation'] = st.date_input("Date de lancement pr√©vue")
    st.session_state.reponses['forme_juridique'] = st.selectbox(
        "Forme juridique",
        ["SARL", "SAS", "EURL", "Auto-entrepreneur", "Autre"]
    )

with col2:
    st.session_state.reponses['type_cinema'] = st.selectbox(
        "Type de cin√©ma cible",
        ["Cin√©ma ind√©pendant", "R√©seau de cin√©mas", "Distributeur", "Producteur", "Autre"]
    )
    st.session_state.reponses['zone_geographique'] = st.multiselect(
        "Zone g√©ographique cible",
        ["France", "Europe", "Am√©rique du Nord", "Asie", "Autre"]
    )
    st.session_state.reponses['nombre_utilisateurs_cible'] = st.number_input(
        "Nombre d'utilisateurs cible (ann√©e 1)",
        min_value=0,
        step=100
    )

# Section 2: Analyse du march√©
st.header("2Ô∏è‚É£ Analyse du march√©")
st.session_state.reponses['description_application'] = st.text_area(
    "Description d√©taill√©e de l'application",
    height=100,
    help="D√©crivez les fonctionnalit√©s principales comme la planification de projections, l'analyse de donn√©es, etc."
)
st.session_state.reponses['cible_principale'] = st.multiselect(
    "Client√®le cible principale",
    ["Distributeurs", "Producteurs", "Exploitants de salles", "Organisateurs d'√©v√©nements", "Autre"]
)
st.session_state.reponses['concurrence'] = st.text_area(
    "Analyse de la concurrence",
    height=100,
    help="Listez les solutions concurrentes existantes et leurs points forts/faibles"
)

# Section 3: Strat√©gie marketing
st.header("3Ô∏è‚É£ Strat√©gie marketing")
st.session_state.reponses['positionnement'] = st.text_area(
    "Positionnement sur le march√©",
    height=100,
    help="Comment votre application se diff√©rencie-t-elle des solutions existantes ?"
)
st.session_state.reponses['canaux_acquisition'] = st.multiselect(
    "Canaux d'acquisition clients",
    ["Salons professionnels", "R√©seaux sociaux", "Email marketing", "Partenariats", "Conf√©rences", "Autre"]
)
st.session_state.reponses['strategie_prix'] = st.selectbox(
    "Mod√®le √©conomique",
    ["Abonnement mensuel", "Abonnement annuel", "Paiement √† l'utilisation", "Freemium", "Licence"] 
)

# Section 4: Plan op√©rationnel
st.header("4Ô∏è‚É£ Plan op√©rationnel")
st.session_state.reponses['fonctionnalites_principales'] = st.text_area(
    "Fonctionnalit√©s principales",
    height=100,
    help="Listez les fonctionnalit√©s cl√©s de l'application"
)
st.session_state.reponses['technologies'] = st.multiselect(
    "Technologies utilis√©es",
    ["Python", "Streamlit", "OpenAI API", "Base de donn√©es", "Cloud", "Autre"]
)
st.session_state.reponses['infrastructure'] = st.text_area(
    "Infrastructure n√©cessaire",
    height=100,
    help="D√©crivez les besoins en infrastructure (serveurs, stockage, etc.)"
)

# Section 5: Plan financier
st.header("5Ô∏è‚É£ Plan financier")
col1, col2 = st.columns(2)

with col1:
    st.session_state.reponses['investissement_initial'] = st.number_input(
        "Investissement initial (‚Ç¨)",
        min_value=0,
        step=1000
    )
    st.session_state.reponses['prix_abonnement'] = st.number_input(
        "Prix de l'abonnement mensuel (‚Ç¨)",
        min_value=0,
        step=10
    )

with col2:
    st.session_state.reponses['cout_operationnel_mensuel'] = st.number_input(
        "Co√ªt op√©rationnel mensuel (‚Ç¨)",
        min_value=0,
        step=100
    )
    st.session_state.reponses['objectif_utilisateurs_payants'] = st.number_input(
        "Objectif d'utilisateurs payants (ann√©e 1)",
        min_value=0,
        step=10
    )

# Section 6: Analyse des risques
st.header("6Ô∏è‚É£ Analyse des risques")
st.session_state.reponses['risques_techniques'] = st.text_area(
    "Risques techniques",
    height=100,
    help="Ex: Probl√®mes de scalabilit√©, d√©pendance aux APIs externes, etc."
)
st.session_state.reponses['risques_marche'] = st.text_area(
    "Risques li√©s au march√©",
    height=100,
    help="Ex: Adoption lente, concurrence, etc."
)
st.session_state.reponses['strategies_mitigation'] = st.text_area(
    "Strat√©gies de mitigation des risques",
    height=100
)

# Bouton pour g√©n√©rer le business plan
if st.button("G√©n√©rer le Business Plan"):
    pdf_buffer = generer_pdf(st.session_state.reponses)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    pdf_filename = f"business_plan_cinema_{timestamp}.pdf"
    
    # Sauvegarde du PDF
    with open(pdf_filename, "wb") as f:
        f.write(pdf_buffer.getvalue())
    
    st.success(f"Votre business plan a √©t√© g√©n√©r√© !")
    
    # Bouton pour t√©l√©charger le PDF
    with open(pdf_filename, "rb") as f:
        st.download_button(
            label="üì• T√©l√©charger le PDF",
            data=f,
            file_name=pdf_filename,
            mime="application/pdf"
        ) 