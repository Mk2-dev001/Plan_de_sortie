# --- ai.py ---
# Application Streamlit pour aider √† planifier des projections de films
# [...] (garde les autres commentaires initiaux si tu veux)

import streamlit as st
import json
import openai
from openai import OpenAI
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut, GeocoderUnavailable
from geopy.distance import geodesic # Utilise geodesic pour des distances plus pr√©cises
import folium
from streamlit_folium import st_folium # Pour mieux int√©grer Folium dans Streamlit
import os
import pandas as pd
import uuid
import pandas # Ajout√© pour st.dataframe

# --- CONFIGURATION DE LA PAGE (DOIT √äTRE LA PREMI√àRE COMMANDE STREAMLIT) ---
st.set_page_config(layout="wide", page_title="Assistant Cin√©ma MK2", page_icon="üó∫Ô∏è") # Utilise toute la largeur, ajoute un titre/ic√¥ne d'onglet

# --- Configuration (Variables globales) ---
# Nom du fichier JSON contenant les cin√©mas AVEC leurs coordonn√©es pr√©-calcul√©es
GEOCATED_CINEMAS_FILE = "cinemas_groupedBig.json"
# User agent pour le service de g√©ocodage (utilis√© seulement pour les localisations demand√©es par l'utilisateur)
GEOCODER_USER_AGENT = "CinemaMapApp/1.0 (App)"
# Timeout pour le g√©ocodage des localisations demand√©es
GEOCODER_TIMEOUT = 10

# --- Initialisation du client OpenAI ---
# Assure-toi que la variable d'environnement OPENAI_API_KEY est d√©finie
try:
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    # Test rapide pour voir si la cl√© est au moins pr√©sente (ne valide pas la cl√© elle-m√™me)
    if not client.api_key:
        # Utilise st.error MAINTENANT que set_page_config est appel√©e avant
        st.error("La cl√© API OpenAI n'a pas √©t√© trouv√©e. Veuillez d√©finir la variable d'environnement OPENAI_API_KEY.")
        st.stop() # Arr√™te l'ex√©cution si la cl√© manque
except Exception as e:
    st.error(f"Erreur lors de l'initialisation du client OpenAI : {e}")
    st.stop()

# --- Chargement des donn√©es des cin√©mas pr√©-g√©ocod√©es ---
try:
    with open(GEOCATED_CINEMAS_FILE, "r", encoding="utf-8") as f:
        cinemas_data = json.load(f)
    # Filtre optionnel : ne garde que les cin√©mas qui ont des coordonn√©es valides
    original_count = len(cinemas_data)
    cinemas_data = [c for c in cinemas_data if c.get('lat') is not None and c.get('lon') is not None]
    valid_count = len(cinemas_data)
    if original_count > valid_count:
        st.sidebar.info(f"{original_count - valid_count} cin√©mas sans coordonn√©es valides ont √©t√© ignor√©s.")

except FileNotFoundError:
    st.error(f"ERREUR : Le fichier de donn√©es '{GEOCATED_CINEMAS_FILE}' est introuvable.")
    st.error("Veuillez ex√©cuter le script 'preprocess_cinemas.py' pour g√©n√©rer ce fichier.")
    st.stop() # Arr√™te l'ex√©cution de l'application si le fichier de donn√©es manque
except json.JSONDecodeError:
    st.error(f"ERREUR : Le fichier de donn√©es '{GEOCATED_CINEMAS_FILE}' contient un JSON invalide.")
    st.stop()
except Exception as e:
    st.error(f"Erreur inattendue lors du chargement des donn√©es des cin√©mas : {e}")
    st.stop()

# --- Initialisation du G√©ocodeur (pour les requ√™tes utilisateur) ---
geolocator = Nominatim(user_agent=GEOCODER_USER_AGENT, timeout=GEOCODER_TIMEOUT)

# --- Fonctions ---

# Fonction pour analyser la requ√™te utilisateur avec OpenAI (GPT-4o)
# Utilise le cache de Streamlit pour √©viter de refaire les appels API pour la m√™me requ√™te
@st.cache_data(show_spinner=False) # show_spinner=False car on a notre propre spinner
def analyser_requete_ia(question: str):
    """
    Interpr√®te la requ√™te de l'utilisateur en utilisant GPT-4o pour extraire
    les localisations et le nombre de spectateurs cible.
    Retourne une liste de dictionnaires ou une liste vide en cas d'√©chec.
    """
    # Prompt syst√®me d√©taill√© pour guider l'IA
    system_prompt = (
        "Tu es un expert en distribution cin√©matographique en France. "
        "L'utilisateur te confie un projet de diffusion en salle (test, avant-premi√®re, lancement, tourn√©e, etc.). "
        "Ta mission est de transformer ce besoin en une liste JSON claire de villes cibles et de jauges spectateurs, pour construire un plan de sortie r√©aliste. "

        "Voici les r√®gles √† suivre :\n\n"

        "1Ô∏è‚É£ Chaque intention doit devenir un dictionnaire JSON avec deux cl√©s :\n"
        "   - 'localisation' : une ville (pas une r√©gion, sauf cas particulier),\n"
        "   - 'nombre' : un nombre entier de spectateurs √† atteindre.\n\n"
        "   - 'nombre_seances' : quand l'utilisateur sp√©cifie un nombre de s√©ances ou salles souhait√©.\n\n"

        "2Ô∏è‚É£ Si l'utilisateur parle de r√©gions vagues (r√©gion, zone g√©ographique, tout le pays...), tu dois automatiquement les convertir en **villes repr√©sentatives**, selon ce mapping :\n"
        "   - 'r√©gion parisienne', 'idf', '√Æle-de-france' ‚Üí ['Paris']\n"
        "   - 'sud', 'sud de la France', 'paca', 'provence' ‚Üí ['Marseille', 'Toulouse', 'Nice']\n"
        "   - 'nord', 'hauts-de-france' ‚Üí ['Lille']\n"
        "   - 'ouest', 'bretagne', 'normandie' ‚Üí ['Nantes', 'Rennes']\n"
        "   - 'est', 'grand est', 'alsace' ‚Üí ['Strasbourg']\n"
        "   - 'centre', 'centre-val de loire', 'auvergne' ‚Üí ['Clermont-Ferrand']\n"
        "   - 'France enti√®re', 'toute la France', 'province', 'le territoire', 'le reste du territoire fran√ßais' ‚Üí ['Lyon', 'Marseille', 'Lille', 'Bordeaux', 'Strasbourg']\n\n"

        "3Ô∏è‚É£ Si une **quantit√© globale** est donn√©e pour une zone, r√©partis-la √©quitablement entre les salles de cin√©ma (ATTENTION 1 salle = 1 s√©ance !) de cette Zone dont la capacit√© total sera √©gale a la quantit√© global\n"
        "   Par exemple : '3000 spectateurs dans le reste du territoire' ‚Üí 3000 sp√©ctateur au total repartis dans chaque ville choisie (5 villes) le plus √©quitablement possible.\n"
        "   Tu peux ajuster l√©g√®rement les r√©partitions si le total n'est pas divisible parfaitement.\n\n"
        "   ATTENTION : Jamais plus de 500 s√©ances"
        
        "8Ô∏è‚É£ Nouvelle r√®gle IMPORTANTE: Si l'utilisateur pr√©cise un nombre de s√©ances ou de salles (ex: '15 s√©ances dans toute la France'), tu dois extraire cette information dans le champ 'nombre_seances' pour chaque localisation. Tu dois distribuer ce nombre entre les localisations si elles sont multiples. Par exemple, pour '15 s√©ances pour un total de 8000 personnes dans toute la France', tu dois r√©partir les 15 s√©ances entre les villes repr√©sentatives de la France et les 8000 personnes entre ces s√©ances."

        "4Ô∏è‚É£ Si un lieu est donn√© **sans nombre pr√©cis**, d√©duis une estimation raisonnable en fonction du contexte :\n"
        "   - 'petite salle', 's√©ance test' ‚Üí 50 √† 100\n"
        "   - 'avant-premi√®re' ‚Üí 200 √† 400\n"
        "   - 'grande salle', 'grande ville' ‚Üí 500 √† 1000\n"
        "   - 'province' ‚Üí 100 √† 300\n"
        "   - 'cin√©ma art et essai' ‚Üí 100 √† 150\n\n"

        "5Ô∏è‚É£ Si le texte contient plusieurs zones ou intentions, tu dois retourner une liste de toutes les intentions s√©par√©es.\n"
        "   Exemple : '300 √† Paris, 100 √† Lyon et test en Bretagne' ‚Üí ['Paris', 300], ['Lyon', 100], ['Rennes', 100]\n\n"

        "6Ô∏è‚É£ Le r√©sultat DOIT √™tre une **liste JSON pure**, sans explication, sans texte avant ou apr√®s. "
        "Juste : [ {{...}}, {{...}} ]\n\n"

        "7Ô∏è‚É£ Si aucun lieu ni objectif n‚Äôest identifiable, retourne simplement : []"
    )

    try:
        # Appel √† l'API OpenAI ChatCompletion (sans forcer le format JSON strict)
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": question}
            ]
        )

        # R√©cup√®re la r√©ponse textuelle brute
        text_response = response.choices[0].message.content.strip()

        # Affiche dans la sidebar pour d√©bogage
        st.sidebar.write("R√©ponse brute de l'IA :")
        st.sidebar.code(text_response, language="json")

        # Tente de parser la r√©ponse en JSON (souple)
        try:
            data = json.loads(text_response)

            # Si la r√©ponse contient un message d‚Äôerreur (ex : JSON forc√©)
            if isinstance(data, dict) and "message" in data:
                st.warning(f"‚ö†Ô∏è L'IA a r√©pondu : {data['message']}")
                return []

            # ‚úÖ Cas sp√©cial : un seul objet, on l'encapsule
            if isinstance(data, dict) and 'localisation' in data and 'nombre' in data:
                localisation = str(data['localisation']).strip()
                try:
                    nombre = int(data['nombre'])
                except ValueError:
                    nombre = 0
                return [{"localisation": localisation, "nombre": nombre}]

            # ‚úÖ Cas classique : une liste d‚Äôintentions
            elif isinstance(data, list):
                if all(isinstance(item, dict) and 'localisation' in item and 'nombre' in item for item in data):
                    return data
                else:
                    st.warning("L'IA a retourn√© une liste JSON, mais les √©l√©ments n'ont pas le bon format.")
                    return []

            # ‚úÖ Cas envelopp√© dans un objet avec des cl√©s
            elif isinstance(data, dict):
                potential_keys = ['resultats', 'projections', 'locations', 'intentions', 'data', 'result']
                for key in potential_keys:
                    if key in data and isinstance(data[key], list):
                        extracted = data[key]
                        if all(isinstance(item, dict) and 'localisation' in item and 'nombre' in item for item in extracted):
                            return extracted
                st.warning("L'IA a retourn√© un objet, mais aucune structure attendue n'a √©t√© trouv√©e.")
                return []

            else:
                st.warning("La r√©ponse n'est ni une liste ni un dictionnaire exploitable.")
                return []

        except json.JSONDecodeError:
            st.warning("La r√©ponse n'√©tait pas un JSON valide, tentative d'extraction manuelle...")
            try:
                json_part = text_response[text_response.find("["):text_response.rfind("]")+1]
                extracted = json.loads(json_part)
                if all(isinstance(item, dict) and 'localisation' in item and 'nombre' in item for item in extracted):
                    return extracted
                else:
                    st.warning("Le JSON extrait manuellement n‚Äôa pas le bon format.")
                    return []
            except Exception:
                st.error("Impossible d‚Äôinterpr√©ter la r√©ponse de l‚ÄôIA.")
                return []

    except openai.APIError as e:
        st.error(f"Erreur OpenAI : {e}")
        return []
    except Exception as e:
        st.error(f"Erreur inattendue : {e}")
        return []

# Fonction pour g√©ocoder une adresse (utilis√©e pour la localisation CIBLE de l'utilisateur)
def geo_localisation(adresse: str):
    """
    Tente de trouver les coordonn√©es (latitude, longitude) pour une adresse donn√©e
    en utilisant Nominatim. G√®re quelques corrections courantes pour les r√©gions fran√ßaises.
    Retourne un tuple (lat, lon) ou None si introuvable ou en cas d'erreur.
    """
    # Dictionnaire de corrections pour les termes vagues ou r√©gionaux
    # On les mappe vers des villes sp√©cifiques pour le g√©ocodage
    corrections = {
        "r√©gion parisienne": "Paris, France",
        "idf": "Paris, France",
        "√Æle-de-france": "Paris, France",
        "ile de france": "Paris, France",
        "sud": "Marseille, France",
        "le sud": "Marseille, France",
        "paca": "Marseille, France",
        "provence-alpes-c√¥te d'azur": "Marseille, France",
        "nord": "Lille, France",
        "le nord": "Lille, France",
        "hauts-de-france": "Lille, France",
        "bretagne": "Rennes, France",
        "c√¥te d'azur": "Nice, France",
        "rh√¥ne-alpes": "Lyon, France",
        "auvergne-rh√¥ne-alpes": "Lyon, France",
        "aquitaine": "Bordeaux, France",
        "nouvelle-aquitaine": "Bordeaux, France",
        "alsace": "Strasbourg, France",
        "grand est": "Strasbourg, France",
        # On peut consid√©rer "France enti√®re" comme Paris par d√©faut
        "france": "Paris, France",
        "territoire fran√ßais": "Paris, France",
    }

    # Normalise l'adresse (minuscules, sans espaces superflus)
    adresse_norm = adresse.lower().strip()
    # Applique une correction si l'adresse normalis√©e est dans le dictionnaire
    adresse_corrigee = corrections.get(adresse_norm, adresse) # Utilise l'adresse originale si pas de correction

    # S'assure que ", France" est ajout√© pour aider Nominatim, sauf si c'est d√©j√† l√†
    if ", france" not in adresse_corrigee.lower():
        adresse_requete = f"{adresse_corrigee}, France"
    else:
        adresse_requete = adresse_corrigee

    # Affiche l'adresse utilis√©e pour le g√©ocodage (utile pour le d√©bogage)
    st.sidebar.write(f"G√©ocodage du point central pour '{adresse}' -> Requ√™te: '{adresse_requete}'")

    try:
        # Appel au service Nominatim
        loc = geolocator.geocode(adresse_requete) # Utilise le timeout d√©fini lors de l'initialisation
        if loc:
            st.sidebar.write(f"  -> Coordonn√©es trouv√©es : ({loc.latitude:.4f}, {loc.longitude:.4f})")
            return (loc.latitude, loc.longitude)
        else:
            st.sidebar.warning(f"  -> Adresse '{adresse_requete}' non trouv√©e par Nominatim.")
            return None
    except (GeocoderTimedOut, GeocoderUnavailable) as e:
        # G√®re les erreurs sp√©cifiques de Geopy
        st.sidebar.error(f"Erreur de g√©ocodage pour '{adresse_requete}': {e}")
        return None
    except Exception as e:
        # G√®re les autres erreurs potentielles
        st.sidebar.error(f"Erreur inattendue lors du g√©ocodage de '{adresse_requete}': {e}")
        return None

# Fonction pour trouver les cin√©mas proches et ayant une capacit√© suffisante
# Utilise maintenant les coordonn√©es pr√©-calcul√©es des cin√©mas
def trouver_cinemas_proches(localisation_cible: str, spectateurs_voulus: int, nombre_de_salles_voulues: int, rayon_km: int = 50):
    """
    Trouve des cin√©mas proches d'une localisation cible, avec une capacit√© adapt√©e au nombre de spectateurs voulus.
    Respecte strictement le nombre de salles demand√©es, quitte √† √©largir les crit√®res.
    
    Args:
        localisation_cible (str): Ville ou r√©gion o√π chercher
        spectateurs_voulus (int): Nombre total de spectateurs cible
        nombre_de_salles_voulues (int): Nombre EXACT de salles √† trouver
        rayon_km (int): Rayon de recherche en kilom√®tres
        
    Returns:
        list: Liste des salles s√©lectionn√©es
    """
    point_central_coords = geo_localisation(localisation_cible)
    if not point_central_coords:
        st.warning(f"Impossible de trouver des cin√©mas car la localisation centrale '{localisation_cible}' n'a pas pu √™tre g√©ocod√©e.")
        return []

    resultats = []
    capacite_cumulee = 0
    
    # Liste temporaire de toutes les salles avec leurs infos
    salles_eligibles = []

    for cinema in cinemas_data:
        lat = cinema.get('lat')
        lon = cinema.get('lon')
        if lat is None or lon is None:
            continue

        try:
            distance = geodesic(point_central_coords, (lat, lon)).km
        except Exception as e:
            st.sidebar.warning(f"Erreur de distance pour {cinema.get('cinema')} : {e}")
            continue

        if distance > rayon_km:
            continue

        for salle in cinema.get("salles", []):
            try:
                capacite = int(salle.get("capacite", 0))
            except (ValueError, TypeError):
                continue

            if capacite <= 0 or capacite < 66:  # On ignore les salles trop petites
                continue

            salles_eligibles.append({
                "cinema": cinema.get("cinema"),
                "salle": salle.get("salle"),
                "adresse": cinema.get("adresse"),
                "lat": lat,
                "lon": lon,
                "capacite": capacite,
                "distance_km": round(distance, 2),
                "contact": cinema.get("contact", {}),
                "source_localisation": localisation_cible
            })

    # Si aucune salle n'est trouv√©e, retourner liste vide
    if not salles_eligibles:
        st.sidebar.warning(f"Aucune salle √©ligible trouv√©e pour {localisation_cible} dans un rayon de {rayon_km} km.")
        return []
        
    # Trie les salles par distance ET capacit√© (priorit√© √† la distance)
    salles_eligibles.sort(key=lambda x: (x["distance_km"], -x["capacite"]))
    
    # PHASE 1 : Essayer d'obtenir exactement le nombre de salles demand√©es avec la meilleure capacit√©
    capacite_moyenne_cible = spectateurs_voulus / nombre_de_salles_voulues if nombre_de_salles_voulues > 0 else 0
    
    # Premi√®re tentative : prendre les salles les plus proches respectant la capacit√© moyenne
    for salle in salles_eligibles:
        if len(resultats) < nombre_de_salles_voulues and capacite_cumulee + salle["capacite"] <= spectateurs_voulus:
            resultats.append(salle)
            capacite_cumulee += salle["capacite"]
    
    # PHASE 2 : Si nous n'avons pas assez de salles, rel√¢cher la contrainte de capacit√©
    if len(resultats) < nombre_de_salles_voulues:
        st.sidebar.info(f"Assouplissement des crit√®res pour {localisation_cible} : seulement {len(resultats)}/{nombre_de_salles_voulues} salles trouv√©es.")
        
        # Vider la liste des r√©sultats pour recommencer
        resultats = []
        capacite_cumulee = 0
        
        # Prendre les N meilleures salles, m√™me si on d√©passe la capacit√© totale
        for salle in salles_eligibles[:nombre_de_salles_voulues]:
            resultats.append(salle)
            capacite_cumulee += salle["capacite"]
    
    # Si on n'a toujours pas assez de salles, c'est qu'il n'y en a vraiment pas assez dans la base
    if len(resultats) < nombre_de_salles_voulues:
        st.sidebar.warning(f"Impossible de trouver {nombre_de_salles_voulues} salles pour {localisation_cible}. Seulement {len(resultats)} disponibles.")
    
    # Limiter au nombre exact de salles demand√©es (cas o√π la phase 2 a pris trop de salles)
    return resultats[:nombre_de_salles_voulues]

# Fonction pour g√©n√©rer la carte Folium
def generer_carte_folium(groupes_de_cinemas: list):
    """
    Cr√©e une carte Folium affichant les cin√©mas trouv√©s, regroup√©s par couleur
    selon la localisation de la requ√™te initiale.

    Args:
        groupes_de_cinemas (list): Une liste o√π chaque √©l√©ment est un dictionnaire
                                   contenant la localisation demand√©e et les r√©sultats (cin√©mas trouv√©s).
                                   Ex: [{'localisation': 'Paris', 'resultats': [...]}, {'localisation': 'Lyon', 'resultats': [...]}]

    Returns:
        folium.Map or None: Un objet carte Folium si des cin√©mas ont √©t√© trouv√©s, sinon None.
    """
    # R√©cup√®re tous les cin√©mas de tous les groupes pour trouver le centre de la carte
    tous_les_cinemas = [cinema for groupe in groupes_de_cinemas for cinema in groupe.get("resultats", [])]

    # S'il n'y a aucun cin√©ma √† afficher, retourne None
    if not tous_les_cinemas:
        return None

    # Calcule le centre g√©ographique moyen de tous les points trouv√©s pour centrer la carte
    avg_lat = sum(c['lat'] for c in tous_les_cinemas) / len(tous_les_cinemas)
    avg_lon = sum(c['lon'] for c in tous_les_cinemas) / len(tous_les_cinemas)

    # Cr√©e l'objet carte Folium
    m = folium.Map(location=[avg_lat, avg_lon], zoom_start=6, tiles="CartoDB positron")

    # Palette de couleurs pour les groupes
    couleurs = [
        "blue", "green", "red", "purple", "orange", "darkred", "lightred",
        "beige", "darkblue", "darkgreen", "cadetblue", "lightgray", "black"
    ]

    # Ajoute chaque groupe de r√©sultats
    for idx, groupe in enumerate(groupes_de_cinemas):
        couleur = couleurs[idx % len(couleurs)]
        localisation_origine = groupe.get("localisation", "Inconnue")
        resultats_groupe = groupe.get("resultats", [])

        feature_group = folium.FeatureGroup(name=f"{localisation_origine} ({len(resultats_groupe)} cin√©mas)")

        for cinema in resultats_groupe:
            # Ajout manuel des infos contact pour affichage et table
            contact = cinema.get("contact", {})
            contact_nom = contact.get("nom", "N/A")
            contact_email = contact.get("email", "N/A")
            cinema["contact_nom"] = contact_nom
            cinema["contact_email"] = contact_email

            popup_html = f"""
            <b>{cinema.get('cinema', 'Nom inconnu')}</b><br>
            <i>{cinema['adresse']}</i><br>
            Capacit√© : {cinema['capacite']} places<br>
            Distance ({localisation_origine}) : {cinema['distance_km']} km<br>
            Contact : <b>{contact_nom}</b><br>
            üìß {contact_email}
            """

            folium.CircleMarker(
                location=[cinema['lat'], cinema['lon']],
                radius=5,
                color=couleur,
                fill=True,
                fill_color=couleur,
                fill_opacity=0.7,
                popup=folium.Popup(popup_html, max_width=300)
            ).add_to(feature_group)

        feature_group.add_to(m)

    folium.LayerControl().add_to(m)

    return m

# --- Interface Utilisateur Streamlit ---
# st.set_page_config(layout="wide") # Utilise toute la largeur de la page
st.title("üó∫Ô∏è Assistant de Planification Cin√©ma MK2")
st.markdown("D√©crivez votre projet de diffusion et l'IA identifiera les cin√©mas pertinents en France.")

# Section d'aide dans un expander
with st.expander("‚ÑπÔ∏è Comment √ßa marche ?"):
    st.markdown("""
    Cette application vous aide √† planifier des projections de films en identifiant les cin√©mas les plus adapt√©s en France.

    ### üìù 1. D√©crivez votre plan
    Dans la zone de texte ci-dessous, indiquez votre besoin en langage naturel : lieux (villes ou r√©gions), type d'√©v√©nement (test, avant-premi√®re, lancement) et public cible (nombre de spectateurs, nombre de s√©ances, etc.).

    *Exemples :*
    - "Je veux tester mon film dans une petite salle √† Lyon et faire une avant-premi√®re √† Paris pour 300 personnes."
    - "15 s√©ances dans toute la France pour atteindre 8000 spectateurs."
    - "Diffusion en Bretagne avec un objectif de 150 spectateurs par ville."

    ### ü§ñ 2. Analyse par l‚ÄôIA (GPT-4o)
    L‚Äôintelligence artificielle interpr√®te votre demande pour en extraire les localisations cibles, les jauges de spectateurs et les contraintes de s√©ances √©ventuelles.

    ### üîç 3. Recherche automatique de cin√©mas
    Le syst√®me explore une base de donn√©es de cin√©mas g√©olocalis√©s en France, √† la recherche de salles adapt√©es √† votre besoin (proximit√©, capacit√©, disponibilit√©).

    ### üó∫Ô∏è 4. Carte interactive
    Une carte Folium affiche les cin√©mas trouv√©s. Cliquez sur les points pour voir les d√©tails (adresse, capacit√©, contact). Vous pouvez filtrer les r√©sultats par zone via le menu en haut √† droite de la carte.

    ### üíæ 5. T√©l√©chargements disponibles
    - **üìç Carte HTML** : t√©l√©chargez une version interactive de la carte pour l‚Äôouvrir ou la partager facilement.  
      üëâ *Double-cliquez simplement sur le fichier t√©l√©charg√© (`carte_cinemas.html`) pour l‚Äôouvrir dans votre navigateur, m√™me sans connexion internet.*

    - **üìä Tableaux Excel ou CSV** : pour chaque zone, vous pouvez exporter la liste des cin√©mas s√©lectionn√©s avec leurs coordonn√©es, capacit√©s et contacts.
    """)

# Zone de saisie pour la requ√™te utilisateur
query = st.text_input(
    "Votre demande :",
    placeholder="Ex: Lancement √† Paris (grand public) et test √† Rennes (100 pers.)"
)

# Traitement seulement si l'utilisateur a entr√© une requ√™te
if query:
    # Affichage d'un message pendant l'analyse par l'IA
    with st.spinner("üß† Interpr√©tation de votre requ√™te par l'IA..."):
        # Appel √† la fonction d'analyse (mise en cache)
        instructions_ia = analyser_requete_ia(query)

    # V√©rifie si l'IA a pu extraire des instructions valides
    if not instructions_ia:
        st.warning("L'IA n'a pas pu interpr√©ter votre demande ou n'a trouv√© aucune intention de localisation/jauge valide. Essayez de reformuler.")
    else:
        # Affiche un r√©sum√© de ce que l'IA a compris
        total_spectateurs_estimes = sum(i.get('nombre', 0) for i in instructions_ia)
        total_seances_voulues = sum(i.get("nombre_seances", 0) for i in instructions_ia)
        with st.expander("ü§ñ R√©sum√© de la compr√©hension de l'IA"):
            st.info(f"**IA a compris :** {len(instructions_ia)} zone(s) pour un objectif total de {total_spectateurs_estimes} spectateurs et {total_seances_voulues} s√©ance(s).")
            st.json(instructions_ia)

        # Pr√©pare la liste pour stocker les r√©sultats par groupe de recherche
        liste_groupes_resultats = []
        cinemas_trouves_total = 0

        # Affichage d'un message pendant la recherche des cin√©mas
        with st.spinner(f"üîç Recherche des cin√©mas correspondants..."):
            # Boucle sur chaque instruction (localisation/jauge) retourn√©e par l'IA
            for instruction in instructions_ia:
                loc = instruction.get('localisation')
                num = instruction.get('nombre')

                # V√©rifie si l'instruction est valide avant de chercher
                if loc and isinstance(num, int) and num > 0:
                    st.write(f"--- Recherche pour : **{loc}** (capacit√© min: {num}) ---")
                    # Logique pour adapter automatiquement le rayon si on d√©tecte une r√©gion large
                    corrections_regionales = [
                        "nord", "le nord", "hauts-de-france",
                        "sud", "le sud", "paca", "provence-alpes-c√¥te d'azur",
                        "bretagne",
                        "r√©gion parisienne", "idf", "√Æle-de-france", "ile de france",
                        "aquitaine", "nouvelle-aquitaine",
                        "alsace", "grand est"
                    ]

                    # Si la localisation est une r√©gion large, on √©largit automatiquement le rayon
                    if loc.lower() in corrections_regionales:
                        rayon_recherche = 120
                        st.sidebar.info(f"üîÅ Localisation r√©gionale d√©tect√©e ('{loc}'). Rayon √©largi automatiquement √† {rayon_recherche} km.")
                    else:
                        rayon_recherche = st.sidebar.slider(f"Rayon de recherche autour de {loc} (km)", 5, 200, 50, key=f"rayon_{loc}_{hash(str(instruction))}")

                    # Appel √† la fonction de recherche de cin√©mas
                    if "nombre_seances" in instruction:
                        # Si l'IA a explicitement extrait un nombre de s√©ances demand√©
                        nombre_seances = instruction.get("nombre_seances")
                    else:
                        # Sinon, estimation par d√©faut (comme avant)
                        if "nombre_seances" in instruction and instruction["nombre_seances"]:
                            nombre_seances = int(instruction["nombre_seances"])
                            st.sidebar.info(f"Nombre de s√©ances explicitement demand√© : {nombre_seances}")
                        else:
                            nombre_seances = max(1, round(num / 66))
                            st.sidebar.info(f"Nombre de s√©ances calcul√© automatiquement : {nombre_seances}")

                        # Et plus bas, ajoutez une information explicite dans l'interface :
                        total_seances_voulues = sum(int(i.get('nombre_seances', 0)) for i in instructions_ia if 'nombre_seances' in i)
                        if total_seances_voulues > 0:
                            st.info(f"ü§ñ **IA a compris :** {len(instructions_ia)} zone(s) de recherche pour un objectif total estim√© √† {total_spectateurs_estimes} spectateurs et {total_seances_voulues} s√©ances.")
                        else:
                            st.info(f"ü§ñ **IA a compris :** {len(instructions_ia)} zone(s) de recherche pour un objectif total estim√© √† {total_spectateurs_estimes} spectateurs.")

                        # Et enfin, lors de l'affichage du r√©sultat final, ajoutez cette v√©rification
                        total_seances_trouvees = sum(len(groupe["resultats"]) for groupe in liste_groupes_resultats)
                        seances_manquantes = total_seances_voulues - total_seances_trouvees if total_seances_voulues > 0 else 0

                        if cinemas_trouves_total > 0:
                            if seances_manquantes > 0:
                                st.warning(f"‚ö†Ô∏è Attention : {seances_manquantes} s√©ances n'ont pas pu √™tre trouv√©es sur les {total_seances_voulues} demand√©es.")
                            else:
                                st.success(f"‚úÖ Recherche termin√©e ! {cinemas_trouves_total} salles pertinente(s) trouv√©es au total, correspondant exactement aux {total_seances_voulues} s√©ances demand√©es.")
                        else:
                            st.error("‚ùå Aucun cin√©ma correspondant √† votre demande n'a √©t√© trouv√© dans la base de donn√©es selon les crit√®res d√©finis.")

                    st.sidebar.info(f"Recherche de {nombre_seances} salle(s) pour {num} spectateurs √† {loc}")
                    resultats_cinemas = trouver_cinemas_proches(
                        loc, 
                        spectateurs_voulus=num, 
                        rayon_km=rayon_recherche, 
                        nombre_de_salles_voulues=nombre_seances
                    )    
                    resultats_cinemas = trouver_cinemas_proches(loc, num, rayon_km=rayon_recherche, nombre_de_salles_voulues=nombre_seances)

                    # Affiche le nombre de cin√©mas trouv√©s pour cette instruction
                    if resultats_cinemas:
                        st.write(f"-> Trouv√© {len(resultats_cinemas)} cin√©ma(s) correspondant(s).")
                        # Ajoute les r√©sultats au groupe
                        liste_groupes_resultats.append({
                            "localisation": loc,
                            "resultats": resultats_cinemas
                        })
                        cinemas_trouves_total += len(resultats_cinemas)
                    else:
                        st.write(f"-> Aucun cin√©ma trouv√© pour '{loc}' avec une capacit√© d'au moins {num} places dans un rayon de {rayon_recherche} km.")
                        # Ajoute un groupe vide pour que la l√©gende de la carte mentionne la recherche
                        liste_groupes_resultats.append({
                            "localisation": loc,
                            "resultats": []
                        })
                else:
                    st.warning(f"Instruction IA ignor√©e (format invalide) : {instruction}")

        # G√©n√©ration et affichage de la carte si des cin√©mas ont √©t√© trouv√©s
        if cinemas_trouves_total > 0:
            st.success(f"‚úÖ Recherche termin√©e ! {cinemas_trouves_total} salles pertinente(s) trouv√©(s) au total.")
            # G√©n√®re la carte Folium
            carte = generer_carte_folium(liste_groupes_resultats)

            if carte:
                # Sauvegarde temporaire de la carte en HTML pour le t√©l√©chargement
                map_html_path = "map_output.html"
                carte.save(map_html_path)

                # Bouton pour t√©l√©charger la carte HTML
                with open(map_html_path, "rb") as f:
                    st.download_button(
                        label="üì• T√©l√©charger la Carte (HTML)",
                        data=f,
                        file_name="carte_cinemas.html",
                        mime="text/html"
                    )
                with st.expander("üí° Comment utiliser ce fichier ?"):
                    st.markdown("""
                    - Double-cliquez sur le fichier t√©l√©charg√© `carte_cinemas.html` pour l‚Äôouvrir dans votre navigateur.
                    - Vous n‚Äôavez pas besoin de connexion internet ou de logiciel sp√©cial.
                    - Vous pouvez le partager par email ou l‚Äôint√©grer dans une pr√©sentation.
                    """)

                # Affiche la carte interactive dans Streamlit
                # Utilise st_folium pour une meilleure int√©gration que st.components.v1.html
                st_folium(carte, width='100%', height=600)

                 # Optionnel : Afficher la liste des cin√©mas sous la carte
                with st.expander("Voir la liste d√©taill√©e des cin√©mas trouv√©s"):
                     for groupe in liste_groupes_resultats:
                         if groupe["resultats"]:
                             st.subheader(f"Cin√©mas pour la recherche : {groupe['localisation']}")
                             # Affiche sous forme de dataframe pour une meilleure lisibilit√©
                             df = pd.DataFrame(groupe["resultats"])
                             colonnes_a_masquer = ["lat", "lon", "contact"]
                             colonnes_a_afficher = [col for col in df.columns if col not in colonnes_a_masquer]

                             st.dataframe(df[colonnes_a_afficher], use_container_width=True)
                
                # Sauvegarde Excel par groupe
                nom_fichier = f"cinemas_{groupe['localisation'].replace(' ', '_')}.xlsx"
                df[colonnes_a_afficher].to_excel(nom_fichier, index=False)

                # Ajoute un bouton de t√©l√©chargement pour chaque fichier Excel
                with open(nom_fichier, "rb") as f:
                    st.download_button(
                        label=f"üì• T√©l√©charger Excel pour {groupe['localisation']}",
                        data=f,
                        file_name=nom_fichier,
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )

            else:
                # Ce cas ne devrait pas arriver si cinemas_trouves_total > 0, mais par s√©curit√©
                st.error("Erreur lors de la g√©n√©ration de la carte.")

        else:
            # Aucun cin√©ma trouv√© pour aucune des instructions
            st.error("‚ùå Aucun cin√©ma correspondant √† votre demande n'a √©t√© trouv√© dans la base de donn√©es selon les crit√®res d√©finis.")

# Message si aucune requ√™te n'est entr√©e
else:
    st.info("Entrez une description de votre projet dans la zone de texte ci-dessus pour commencer.")