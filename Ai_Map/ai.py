# --- ai.py ---
# Application Streamlit pour aider √† planifier des projections de films
# [...] (garde les autres commentaires initiaux si tu veux)

import streamlit as st
import json
import openai
from openai import OpenAI
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut, GeocoderUnavailable
from geopy.distance import geodesic # Utilise geodesic pour des distances plus pr√©cises
import folium
from streamlit_folium import st_folium # Pour mieux int√©grer Folium dans Streamlit
import os
import pandas # Ajout√© pour st.dataframe

# --- CONFIGURATION DE LA PAGE (DOIT √äTRE LA PREMI√àRE COMMANDE STREAMLIT) ---
st.set_page_config(layout="wide", page_title="Assistant Cin√©ma MK2", page_icon="üó∫Ô∏è") # Utilise toute la largeur, ajoute un titre/ic√¥ne d'onglet

# --- Configuration (Variables globales) ---
# Nom du fichier JSON contenant les cin√©mas AVEC leurs coordonn√©es pr√©-calcul√©es
GEOCATED_CINEMAS_FILE = "cinemas_geocoded.json"
# User agent pour le service de g√©ocodage (utilis√© seulement pour les localisations demand√©es par l'utilisateur)
GEOCODER_USER_AGENT = "CinemaMapApp/1.0 (App)"
# Timeout pour le g√©ocodage des localisations demand√©es
GEOCODER_TIMEOUT = 10

# --- Initialisation du client OpenAI ---
# Assure-toi que la variable d'environnement OPENAI_API_KEY est d√©finie
try:
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    # Test rapide pour voir si la cl√© est au moins pr√©sente (ne valide pas la cl√© elle-m√™me)
    if not client.api_key:
        # Utilise st.error MAINTENANT que set_page_config est appel√©e avant
        st.error("La cl√© API OpenAI n'a pas √©t√© trouv√©e. Veuillez d√©finir la variable d'environnement OPENAI_API_KEY.")
        st.stop() # Arr√™te l'ex√©cution si la cl√© manque
except Exception as e:
    st.error(f"Erreur lors de l'initialisation du client OpenAI : {e}")
    st.stop()

# --- Chargement des donn√©es des cin√©mas pr√©-g√©ocod√©es ---
try:
    with open(GEOCATED_CINEMAS_FILE, "r", encoding="utf-8") as f:
        cinemas_data = json.load(f)
    # Filtre optionnel : ne garde que les cin√©mas qui ont des coordonn√©es valides
    original_count = len(cinemas_data)
    cinemas_data = [c for c in cinemas_data if c.get('lat') is not None and c.get('lon') is not None]
    valid_count = len(cinemas_data)
    if original_count > valid_count:
        st.sidebar.info(f"{original_count - valid_count} cin√©mas sans coordonn√©es valides ont √©t√© ignor√©s.")

except FileNotFoundError:
    st.error(f"ERREUR : Le fichier de donn√©es '{GEOCATED_CINEMAS_FILE}' est introuvable.")
    st.error("Veuillez ex√©cuter le script 'preprocess_cinemas.py' pour g√©n√©rer ce fichier.")
    st.stop() # Arr√™te l'ex√©cution de l'application si le fichier de donn√©es manque
except json.JSONDecodeError:
    st.error(f"ERREUR : Le fichier de donn√©es '{GEOCATED_CINEMAS_FILE}' contient un JSON invalide.")
    st.stop()
except Exception as e:
    st.error(f"Erreur inattendue lors du chargement des donn√©es des cin√©mas : {e}")
    st.stop()

# --- Initialisation du G√©ocodeur (pour les requ√™tes utilisateur) ---
geolocator = Nominatim(user_agent=GEOCODER_USER_AGENT, timeout=GEOCODER_TIMEOUT)

# --- Fonctions ---

# Fonction pour analyser la requ√™te utilisateur avec OpenAI (GPT-4o)
# Utilise le cache de Streamlit pour √©viter de refaire les appels API pour la m√™me requ√™te
@st.cache_data(show_spinner=False) # show_spinner=False car on a notre propre spinner
def analyser_requete_ia(question: str):
    """
    Interpr√®te la requ√™te de l'utilisateur en utilisant GPT-4o pour extraire
    les localisations et le nombre de spectateurs cible.
    Retourne une liste de dictionnaires ou une liste vide en cas d'√©chec.
    """
    # Prompt syst√®me d√©taill√© pour guider l'IA
    system_prompt = (
        "Tu es un assistant expert pour des programmateurs de cin√©ma. "
        "L'utilisateur d√©crit un projet de projection ou d'exploitation d'un film en France. "
        "Ton r√¥le est d'extraire les intentions de diffusion de sa demande. "
        "Pour chaque lieu g√©ographique distinct mentionn√© (ville, r√©gion sp√©cifique), tu dois d√©duire un nombre cible de spectateurs pour ce lieu. "
        "Si aucun nombre pr√©cis n'est donn√© pour un lieu, propose une estimation r√©aliste bas√©e sur le contexte (par exemple, 'petit public' = 100, 's√©ance test' = 50, 'gros cin√©ma' = 400, 'lancement majeur' = 1000). "
        "Interpr√®te les r√©gions larges en choisissant une ville repr√©sentative (ex: 'sud' -> 'Marseille', 'Bretagne' -> 'Rennes', 'r√©gion parisienne' -> 'Paris'). "
        "Le r√©sultat DOIT √™tre UNIQUEMENT une liste JSON valide. Ne retourne RIEN d'autre (pas de texte avant, pas de texte apr√®s, pas d'explication). "
        "Le format attendu est une liste de dictionnaires, chaque dictionnaire ayant les cl√©s 'localisation' (str, nom de la ville ou lieu pr√©cis) et 'nombre' (int, nombre de spectateurs). "
        "Exemple de sortie attendue : [{'localisation': 'Marseille', 'nombre': 200}, {'localisation': 'Paris', 'nombre': 500}] "
        "Si la requ√™te est trop vague ou ne mentionne aucun lieu/objectif, retourne une liste JSON vide []."
    )

    try:
        # Appel √† l'API OpenAI ChatCompletion
        response = client.chat.completions.create(
            model="gpt-4o", # Utilise le mod√®le sp√©cifi√©
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": question}
            ],
            response_format={"type": "json_object"} # Demande une r√©ponse JSON directement si possible avec le mod√®le
        )

        # R√©cup√®re le contenu de la r√©ponse
        text_response = response.choices[0].message.content.strip()

        # Affiche la r√©ponse brute de l'IA pour le d√©bogage (dans un bloc de code)
        st.sidebar.write("R√©ponse brute de l'IA :")
        st.sidebar.code(text_response, language="json")

        # Tente de parser la r√©ponse JSON
        # GPT peut parfois retourner le JSON dans une structure plus large, on essaie de l'extraire.
        # Le format attendu est une liste, mais avec response_format="json_object",
        # il pourrait l'envelopper dans un objet, ex: {"result": [...]}. On cherche la liste.
        try:
            # Essai direct
            data = json.loads(text_response)
            # Si la r√©ponse est un dictionnaire contenant une cl√© √©vidente pour la liste (ex: 'resultats', 'projections', 'locations')
            if isinstance(data, dict):
                 potential_keys = ['resultats', 'projections', 'locations', 'intentions', 'data', 'result']
                 for key in potential_keys:
                     if key in data and isinstance(data[key], list):
                         extracted_list = data[key]
                         # V√©rifie si les √©l√©ments de la liste ont le bon format
                         if all(isinstance(item, dict) and 'localisation' in item and 'nombre' in item for item in extracted_list):
                              return extracted_list
                 # Si aucune cl√© ne correspond ou si le format interne est incorrect, on retourne vide
                 st.warning("L'IA a retourn√© un objet JSON, mais la structure attendue (liste de localisations/nombres) n'a pas √©t√© trouv√©e.")
                 return []
            # Si la r√©ponse est directement une liste
            elif isinstance(data, list):
                 # V√©rifie si les √©l√©ments de la liste ont le bon format
                 if all(isinstance(item, dict) and 'localisation' in item and 'nombre' in item for item in data):
                      return data
                 else:
                      st.warning("L'IA a retourn√© une liste JSON, mais les √©l√©ments n'ont pas le format attendu ({'localisation': ..., 'nombre': ...}).")
                      return []
            # Si ce n'est ni un dict ni une liste valide
            else:
                st.warning("La r√©ponse JSON de l'IA n'est ni un objet contenant la liste attendue, ni la liste elle-m√™me.")
                return []

        except json.JSONDecodeError:
            # Si le parsing JSON direct √©choue, essaie d'extraire manuellement la partie liste
            # (utile si l'IA ajoute du texte autour du JSON malgr√© les instructions)
            st.warning("La r√©ponse de l'IA n'√©tait pas un JSON valide, tentative d'extraction manuelle...")
            try:
                json_part = text_response[text_response.find("["):text_response.rfind("]") + 1]
                extracted_list = json.loads(json_part)
                # V√©rifie le format interne apr√®s extraction manuelle
                if all(isinstance(item, dict) and 'localisation' in item and 'nombre' in item for item in extracted_list):
                     return extracted_list
                else:
                     st.warning("La liste JSON extraite manuellement n'a pas le format attendu.")
                     return []
            except Exception:
                st.error("Impossible d'extraire ou de parser une liste JSON valide depuis la r√©ponse de l'IA.")
                return [] # Retourne une liste vide en cas d'√©chec total

    except openai.APIError as e:
        st.error(f"Erreur de l'API OpenAI : {e}")
        return []
    except Exception as e:
        st.error(f"Erreur inattendue lors de l'appel √† l'IA : {e}")
        return []

# Fonction pour g√©ocoder une adresse (utilis√©e pour la localisation CIBLE de l'utilisateur)
def geo_localisation(adresse: str):
    """
    Tente de trouver les coordonn√©es (latitude, longitude) pour une adresse donn√©e
    en utilisant Nominatim. G√®re quelques corrections courantes pour les r√©gions fran√ßaises.
    Retourne un tuple (lat, lon) ou None si introuvable ou en cas d'erreur.
    """
    # Dictionnaire de corrections pour les termes vagues ou r√©gionaux
    # On les mappe vers des villes sp√©cifiques pour le g√©ocodage
    corrections = {
        "r√©gion parisienne": "Paris, France",
        "idf": "Paris, France",
        "√Æle-de-france": "Paris, France",
        "ile de france": "Paris, France",
        "sud": "Marseille, France",
        "le sud": "Marseille, France",
        "paca": "Marseille, France",
        "provence-alpes-c√¥te d'azur": "Marseille, France",
        "nord": "Lille, France",
        "le nord": "Lille, France",
        "hauts-de-france": "Lille, France",
        "bretagne": "Rennes, France",
        "c√¥te d'azur": "Nice, France",
        "rh√¥ne-alpes": "Lyon, France",
        "auvergne-rh√¥ne-alpes": "Lyon, France",
        "aquitaine": "Bordeaux, France",
        "nouvelle-aquitaine": "Bordeaux, France",
        "alsace": "Strasbourg, France",
        "grand est": "Strasbourg, France",
        # On peut consid√©rer "France enti√®re" comme Paris par d√©faut
        "france": "Paris, France",
        "territoire fran√ßais": "Paris, France",
    }

    # Normalise l'adresse (minuscules, sans espaces superflus)
    adresse_norm = adresse.lower().strip()
    # Applique une correction si l'adresse normalis√©e est dans le dictionnaire
    adresse_corrigee = corrections.get(adresse_norm, adresse) # Utilise l'adresse originale si pas de correction

    # S'assure que ", France" est ajout√© pour aider Nominatim, sauf si c'est d√©j√† l√†
    if ", france" not in adresse_corrigee.lower():
        adresse_requete = f"{adresse_corrigee}, France"
    else:
        adresse_requete = adresse_corrigee

    # Affiche l'adresse utilis√©e pour le g√©ocodage (utile pour le d√©bogage)
    st.sidebar.write(f"G√©ocodage du point central pour '{adresse}' -> Requ√™te: '{adresse_requete}'")

    try:
        # Appel au service Nominatim
        loc = geolocator.geocode(adresse_requete) # Utilise le timeout d√©fini lors de l'initialisation
        if loc:
            st.sidebar.write(f"  -> Coordonn√©es trouv√©es : ({loc.latitude:.4f}, {loc.longitude:.4f})")
            return (loc.latitude, loc.longitude)
        else:
            st.sidebar.warning(f"  -> Adresse '{adresse_requete}' non trouv√©e par Nominatim.")
            return None
    except (GeocoderTimedOut, GeocoderUnavailable) as e:
        # G√®re les erreurs sp√©cifiques de Geopy
        st.sidebar.error(f"Erreur de g√©ocodage pour '{adresse_requete}': {e}")
        return None
    except Exception as e:
        # G√®re les autres erreurs potentielles
        st.sidebar.error(f"Erreur inattendue lors du g√©ocodage de '{adresse_requete}': {e}")
        return None

# Fonction pour trouver les cin√©mas proches et ayant une capacit√© suffisante
# Utilise maintenant les coordonn√©es pr√©-calcul√©es des cin√©mas
def trouver_cinemas_proches(localisation_cible: str, spectateurs_voulus: int, rayon_km: int = 50):
    """
    Trouve les cin√©mas dans un rayon donn√© autour d'un point central
    qui ont une capacit√© suffisante.
    Utilise les coordonn√©es pr√©-calcul√©es du fichier JSON.

    Args:
        localisation_cible (str): Le nom du lieu demand√© par l'utilisateur (ex: "Paris", "Lyon").
        spectateurs_voulus (int): La capacit√© minimale requise pour le cin√©ma.
        rayon_km (int): Le rayon de recherche maximum autour du point central (par d√©faut 50km).

    Returns:
        list: Une liste de dictionnaires, chaque dictionnaire repr√©sentant un cin√©ma trouv√©.
              Retourne une liste vide si le point central ne peut √™tre g√©ocod√© ou si aucun cin√©ma ne correspond.
    """
    # √âtape 1: G√©ocoder le point central de la recherche (la localisation demand√©e)
    point_central_coords = geo_localisation(localisation_cible)

    # Si le point central n'a pas pu √™tre trouv√©, on ne peut pas chercher de cin√©mas
    if not point_central_coords:
        st.warning(f"Impossible de trouver des cin√©mas car la localisation centrale '{localisation_cible}' n'a pas pu √™tre g√©ocod√©e.")
        return []

    resultats = []
    # √âtape 2: Parcourir les cin√©mas pr√©-g√©ocod√©s
    for cinema in cinemas_data:
        # R√©cup√©rer les coordonn√©es et la capacit√© du cin√©ma courant
        lat = cinema.get('lat')
        lon = cinema.get('lon')
        capacite_str = cinema.get("capacite") # La capacit√© peut √™tre une cha√Æne ou un nombre

        # V√©rifier si le cin√©ma a des coordonn√©es valides
        if lat is not None and lon is not None:
            cinema_coords = (lat, lon)

            # V√©rifier et convertir la capacit√©
            try:
                 # G√®re les cas o√π la capacit√© est None, une cha√Æne vide, ou non num√©rique
                 capacite = int(capacite_str) if capacite_str is not None and str(capacite_str).isdigit() else 0
            except (ValueError, TypeError):
                 capacite = 0 # Met 0 si la conversion √©choue

            # √âtape 3: V√©rifier si la capacit√© est suffisante
            if capacite >= spectateurs_voulus:
                # √âtape 4: Calculer la distance entre le point central et le cin√©ma
                try:
                    distance = geodesic(point_central_coords, cinema_coords).km
                except ValueError as e:
                    # G√®re les erreurs potentielles de calcul de distance (coordonn√©es invalides?)
                    st.sidebar.warning(f"Impossible de calculer la distance pour {cinema.get('cinema', 'Inconnu')} : {e}")
                    continue # Passe au cin√©ma suivant

                # √âtape 5: V√©rifier si le cin√©ma est dans le rayon de recherche
                if distance <= rayon_km:
                    # Ajoute les informations du cin√©ma trouv√© √† la liste des r√©sultats
                    resultats.append({
                        "nom": cinema.get('cinema', 'Nom inconnu'),
                        "adresse": cinema.get('adresse', 'Adresse inconnue'),
                        "lat": lat,
                        "lon": lon,
                        "distance_km": round(distance, 2), # Arrondit la distance pour l'affichage
                        "capacite": capacite,
                        "source_localisation": localisation_cible # Garde une trace de quelle requ√™te a trouv√© ce cin√©
                    })

    # √âtape 6: Trier les r√©sultats par distance (du plus proche au plus lointain)
    resultats.sort(key=lambda x: x["distance_km"])

    return resultats

# Fonction pour g√©n√©rer la carte Folium
def generer_carte_folium(groupes_de_cinemas: list):
    """
    Cr√©e une carte Folium affichant les cin√©mas trouv√©s, regroup√©s par couleur
    selon la localisation de la requ√™te initiale.

    Args:
        groupes_de_cinemas (list): Une liste o√π chaque √©l√©ment est un dictionnaire
                                   contenant la localisation demand√©e et les r√©sultats (cin√©mas trouv√©s).
                                   Ex: [{'localisation': 'Paris', 'resultats': [...]}, {'localisation': 'Lyon', 'resultats': [...]}]

    Returns:
        folium.Map or None: Un objet carte Folium si des cin√©mas ont √©t√© trouv√©s, sinon None.
    """
    # R√©cup√®re tous les cin√©mas de tous les groupes pour trouver le centre de la carte
    tous_les_cinemas = [cinema for groupe in groupes_de_cinemas for cinema in groupe.get("resultats", [])]

    # S'il n'y a aucun cin√©ma √† afficher, retourne None
    if not tous_les_cinemas:
        return None

    # Calcule le centre g√©ographique moyen de tous les points trouv√©s pour centrer la carte
    avg_lat = sum(c['lat'] for c in tous_les_cinemas) / len(tous_les_cinemas)
    avg_lon = sum(c['lon'] for c in tous_les_cinemas) / len(tous_les_cinemas)

    # Cr√©e l'objet carte Folium
    # Ajuste le zoom initial en fonction du nombre de groupes ? (Optionnel)
    m = folium.Map(location=[avg_lat, avg_lon], zoom_start=6, tiles="CartoDB positron")

    # D√©finit une palette de couleurs pour distinguer les groupes de recherche
    couleurs = ["blue", "green", "red", "purple", "orange", "darkred", "lightred", "beige", "darkblue", "darkgreen", "cadetblue", "lightgray", "black"]

    # Ajoute des marqueurs pour chaque cin√©ma sur la carte
    for idx, groupe in enumerate(groupes_de_cinemas):
        couleur = couleurs[idx % len(couleurs)] # Cycle √† travers les couleurs
        localisation_origine = groupe.get("localisation", "Inconnue")
        resultats_groupe = groupe.get("resultats", [])

        # Cr√©e un groupe de fonctionnalit√©s pour chaque requ√™te (permettra de les afficher/masquer plus tard si besoin)
        feature_group = folium.FeatureGroup(name=f"{localisation_origine} ({len(resultats_groupe)} cin√©mas)")

        for cinema in resultats_groupe:
            # Cr√©e le texte du popup pour chaque marqueur
            popup_html = f"""
            <b>{cinema['nom']}</b><br>
            <i>{cinema['adresse']}</i><br>
            Capacit√© : {cinema['capacite']} places<br>
            Distance ({localisation_origine}) : {cinema['distance_km']} km
            """
            # Ajoute un marqueur circulaire pour le cin√©ma
            folium.CircleMarker(
                location=[cinema['lat'], cinema['lon']],
                radius=5, # Taille du marqueur
                color=couleur, # Couleur du contour
                fill=True,
                fill_color=couleur, # Couleur de remplissage
                fill_opacity=0.7,
                popup=folium.Popup(popup_html, max_width=300) # Contenu du popup
            ).add_to(feature_group) # Ajoute au groupe sp√©cifique

        feature_group.add_to(m) # Ajoute le groupe √† la carte

    # Ajoute un contr√¥le des couches pour afficher/masquer les groupes
    folium.LayerControl().add_to(m)

    return m # Retourne l'objet carte Folium

# --- Interface Utilisateur Streamlit ---
# st.set_page_config(layout="wide") # Utilise toute la largeur de la page
st.title("üó∫Ô∏è Assistant de Planification Cin√©ma MK2")
st.markdown("D√©crivez votre projet de diffusion et l'IA identifiera les cin√©mas pertinents en France.")

# Section d'aide dans un expander
with st.expander("‚ÑπÔ∏è Comment √ßa marche ?"):
    st.markdown("""
    Cette application vous aide √† trouver des cin√©mas en France correspondant √† vos besoins de projection.

    1.  **D√©crivez votre besoin** dans la zone de texte ci-dessous en langage naturel. Soyez aussi pr√©cis que possible sur les lieux (villes, r√©gions) et le public cible (nombre de spectateurs).
        * *Exemple 1 :* "Je veux tester mon film dans une petite salle √† Lyon et faire une avant-premi√®re √† Paris pour 300 personnes."
        * *Exemple 2 :* "Lancement national : pr√©voir des salles d'au moins 200 places √† Lille, Bordeaux et Marseille."
        * *Exemple 3 :* "Diffusion en Bretagne avec un objectif de 150 spectateurs par ville."
    2.  **L'IA (GPT-4o)** analyse votre demande pour identifier les localisations et les jauges estim√©es. Les d√©tails de l'interpr√©tation apparaissent dans la barre lat√©rale.
    3.  **Le syst√®me recherche** dans la base de donn√©es les cin√©mas (pr√©alablement g√©ocod√©s) qui correspondent √† ces crit√®res (localisation proche, capacit√© suffisante).
    4.  **Une carte interactive** s'affiche avec les cin√©mas trouv√©s. Cliquez sur les marqueurs pour voir les d√©tails. Utilisez le contr√¥le des couches (en haut √† droite de la carte) pour filtrer par requ√™te.
    5.  Vous pouvez **t√©l√©charger la carte** au format HTML pour la partager ou l'analyser plus tard.

    *Note : La base de donn√©es des cin√©mas et leurs coordonn√©es sont issues du fichier `cinemas_geocoded.json`.*
    """)

# Zone de saisie pour la requ√™te utilisateur
query = st.text_input(
    "Votre demande :",
    placeholder="Ex: Lancement √† Paris (grand public) et test √† Rennes (100 pers.)"
)

# Traitement seulement si l'utilisateur a entr√© une requ√™te
if query:
    # Affichage d'un message pendant l'analyse par l'IA
    with st.spinner("üß† Interpr√©tation de votre requ√™te par l'IA..."):
        # Appel √† la fonction d'analyse (mise en cache)
        instructions_ia = analyser_requete_ia(query)

    # V√©rifie si l'IA a pu extraire des instructions valides
    if not instructions_ia:
        st.warning("L'IA n'a pas pu interpr√©ter votre demande ou n'a trouv√© aucune intention de localisation/jauge valide. Essayez de reformuler.")
    else:
        # Affiche un r√©sum√© de ce que l'IA a compris
        total_spectateurs_estimes = sum(i.get('nombre', 0) for i in instructions_ia)
        st.info(f"ü§ñ **IA a compris :** {len(instructions_ia)} zone(s) de recherche pour un objectif total estim√© √† {total_spectateurs_estimes} spectateurs.")
        st.json(instructions_ia) # Affiche les instructions JSON pour transparence

        # Pr√©pare la liste pour stocker les r√©sultats par groupe de recherche
        liste_groupes_resultats = []
        cinemas_trouves_total = 0

        # Affichage d'un message pendant la recherche des cin√©mas
        with st.spinner(f"üîç Recherche des cin√©mas correspondants..."):
            # Boucle sur chaque instruction (localisation/jauge) retourn√©e par l'IA
            for instruction in instructions_ia:
                loc = instruction.get('localisation')
                num = instruction.get('nombre')

                # V√©rifie si l'instruction est valide avant de chercher
                if loc and isinstance(num, int) and num > 0:
                    st.write(f"--- Recherche pour : **{loc}** (capacit√© min: {num}) ---")
                    # R√©cup√®re le rayon de recherche (on peut le rendre configurable plus tard)
                    rayon_recherche = st.sidebar.slider(f"Rayon de recherche autour de {loc} (km)", 5, 200, 50, key=f"rayon_{loc}")

                    # Appel √† la fonction de recherche de cin√©mas
                    resultats_cinemas = trouver_cinemas_proches(loc, num, rayon_km=rayon_recherche)

                    # Affiche le nombre de cin√©mas trouv√©s pour cette instruction
                    if resultats_cinemas:
                        st.write(f"-> Trouv√© {len(resultats_cinemas)} cin√©ma(s) correspondant(s).")
                        # Ajoute les r√©sultats au groupe
                        liste_groupes_resultats.append({
                            "localisation": loc,
                            "resultats": resultats_cinemas
                        })
                        cinemas_trouves_total += len(resultats_cinemas)
                    else:
                        st.write(f"-> Aucun cin√©ma trouv√© pour '{loc}' avec une capacit√© d'au moins {num} places dans un rayon de {rayon_recherche} km.")
                        # Ajoute un groupe vide pour que la l√©gende de la carte mentionne la recherche
                        liste_groupes_resultats.append({
                            "localisation": loc,
                            "resultats": []
                        })
                else:
                    st.warning(f"Instruction IA ignor√©e (format invalide) : {instruction}")

        # G√©n√©ration et affichage de la carte si des cin√©mas ont √©t√© trouv√©s
        if cinemas_trouves_total > 0:
            st.success(f"‚úÖ Recherche termin√©e ! {cinemas_trouves_total} cin√©ma(s) pertinent(s) trouv√©(s) au total.")
            # G√©n√®re la carte Folium
            carte = generer_carte_folium(liste_groupes_resultats)

            if carte:
                # Sauvegarde temporaire de la carte en HTML pour le t√©l√©chargement
                map_html_path = "map_output.html"
                carte.save(map_html_path)

                # Bouton pour t√©l√©charger la carte HTML
                with open(map_html_path, "rb") as f:
                    st.download_button(
                        label="üì• T√©l√©charger la Carte (HTML)",
                        data=f,
                        file_name="carte_cinemas.html",
                        mime="text/html"
                    )

                # Affiche la carte interactive dans Streamlit
                # Utilise st_folium pour une meilleure int√©gration que st.components.v1.html
                st_folium(carte, width='100%', height=600)

                 # Optionnel : Afficher la liste des cin√©mas sous la carte
                with st.expander("Voir la liste d√©taill√©e des cin√©mas trouv√©s"):
                     for groupe in liste_groupes_resultats:
                         if groupe["resultats"]:
                             st.subheader(f"Cin√©mas pour la recherche : {groupe['localisation']}")
                             # Affiche sous forme de dataframe pour une meilleure lisibilit√©
                             st.dataframe(groupe["resultats"], use_container_width=True)

            else:
                # Ce cas ne devrait pas arriver si cinemas_trouves_total > 0, mais par s√©curit√©
                st.error("Erreur lors de la g√©n√©ration de la carte.")

        else:
            # Aucun cin√©ma trouv√© pour aucune des instructions
            st.error("‚ùå Aucun cin√©ma correspondant √† votre demande n'a √©t√© trouv√© dans la base de donn√©es selon les crit√®res d√©finis.")

# Message si aucune requ√™te n'est entr√©e
else:
    st.info("Entrez une description de votre projet dans la zone de texte ci-dessus pour commencer.")